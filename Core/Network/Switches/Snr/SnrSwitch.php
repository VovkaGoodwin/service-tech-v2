<?php

namespace Core\Network\Switches\Snr;

class SnrSwitch extends \Core\Network\Switches\BaseSwitch {
  protected const PORT_COUNT = 24;
  protected const PORT_STATE_OID = '1.3.6.1.2.1.2.2.1.7';
  protected const TEST_PORT_OID = '1.3.6.1.4.1.40418.7.100.3.2.1.18';
  protected const TEST_PORT_RESULTS_OID = '1.3.6.1.4.1.40418.7.100.3.2.1.19';
  protected const PORT_STATUS_OID = '1.3.6.1.2.1.2.2.1.8';

  protected $portsDiagResult = [];
  public function __construct($ip) {
    parent::__construct($ip);
    $this->startPortDiagnostic();
  }

  public function startPortDiagnostic() {
    for ($i = 1; $i < static::PORT_COUNT; $i ++) {
      $this->startVirtualCableTest($i);
    }
    sleep(1);
  }

  public function enablePort($port) {
    $this->snmp->set($this->ip,
      static::PORT_STATE_OID . ".{$port}",
      self::INTEGER_TYPE,
      self::PORT_STATE_ENABLED
    );
  }

  protected function disablePort($port) {
    $this->snmp->set(
      $this->ip,
      static::PORT_STATE_OID . ".{$port}",
      self::INTEGER_TYPE,
      self::PORT_STATE_DISABLED
    );
  }

  private function startVirtualCableTest($port) {
    $this->snmp->set(
      $this->ip,
      static::TEST_PORT_OID . ".{$port}",
      self::INTEGER_TYPE,
      '1'
    );
  }

  private function getVirtualCableTestResult($port) {
    $response = $this->snmp->get($this->ip, static::TEST_PORT_RESULTS_OID . ".{$port}");
    preg_match_all('#\((?P<pairs>\d, \d)\)\s+(?P<status>\w+)\s+(?P<length>\d+)#', $response, $result);
    foreach ($result[0] as $pair => $item) {
      $this->portsDiagResult[$port][1+$pair] = [
        'cablePairs' => preg_split('#\D+#', $result['pairs'][$pair]),
        'status' => $result['status'][$pair],
        'length' => $result['length'][$pair],
      ];
    }

  }

  public function getFullInfoAboutPort($port) {
    $this->startVirtualCableTest($port);
    $this->getVirtualCableTestResult($port);
    return parent::getFullInfoAboutPort($port); // TODO: Change the autogenerated stub
  }

  public function getPairStatus($port, $pairNum) {
    return $this->portsDiagResult[$port][$pairNum]['status'] ?? 'Other';
  }

  public function getPairLength($port, $pairNum) {
    return $this->portsDiagResult[$port][$pairNum]['length'] ?? 0;
  }

  public function getCrcCount($port) {
    return 0; //todo Необходимо найти способ читать количество ошибок, пока что есть только на очистку
  }


}